return(list())
}
res_loss<-getLOHRegions(scData_k_norm_cp2,diffThreshold = 0.90,lossCutoff = -0.75,minLength = 2e6,minSeg=2,targetFun=IQR,signalBoost=2,lossCutoffCells = 100,lossCutoffReads = 75,quantileLimit=0.3,meanThreshold=5)
getLOHRegions <- function(inputMatrixIn,lossCutoff=(-0.25), uncertaintyCutLoss=0.5, diffThreshold=0.9, minLength=3e6, minSeg=3, lossCutoffCells=100,targetFun=IQR,signalBoost=1e-6,lossCutoffReads=100,quantileLimit=0.3,cpgCutoff=0,meanThreshold=4)
{
#c("E","V")
pdf(str_c(scCNVCaller$locPrefix,scCNVCaller$outPrefix,"_LOH.pdf"),width=6,height=4)
inputMatrix<-data.table(inputMatrixIn)
inputMatrix<-inputMatrix[,cpg:=scCNVCaller$cpg_data$cpg_density]
inputMatrix<-inputMatrix[,arm:=scCNVCaller$cytoband_data$V4]
inputMatrix<-inputMatrix[which(inputMatrix[,arm!="cen" & blacklist==0 & cpg>cpgCutoff & chrom!="chrY"])]
inputMatrix<-inputMatrix[,c("raw_medians","blacklist","cpg","arm"):=NULL]
#inputMatrix<-input
#%>% mutate(cpg=cpg_data$cpg_density) %>% mutate(arm=cytoband_data$V4) %>% filter(arm!="cen", blacklist==0, cpg>0) %>% select(-arm,-blacklist) #%>%  #cpg+
#check if raw_medians
#mutate
#view(inputMatrix$cpg)
#inputMatrix<-inputMatrix %>% mutate_at(vars(ends_with("-1")),funs(./(log(cpg,base=2))))
#print(nrow(inputMatrix))
chromList<-unique(inputMatrix$chrom)
chromList<-c("chr9","chr10")
#print(chromList)
dm_per_cell_vals<-data.frame(cellName=colnames(inputMatrix  %>% select(ends_with(scCNVCaller$cellSuffix))),stringsAsFactors=FALSE)
alteration_list=c()
last_coords=c(0,0)
alteration_delta=c()
#may not need IQR, may work with mean/median instead
for (targetChrom in chromList)
{
inputMatrixK<-inputMatrix[which(inputMatrix[,chrom==targetChrom])]
tmp_coords<-inputMatrixK[,c("chrom","pos")]
# print(tail(colnames(inputMatrixK)))
#print(transpose(inputMatrixK[,chrom:=NULL],make.names = "pos"))
#print(str(transpose(inputMatrixK[,chrom:=NULL],make.names = "pos")))
#print(tail(colnames((transpose(inputMatrixK[,chrom:=NULL],make.names = "pos")))))
#message(targetChrom)
IQRv<-transpose(inputMatrixK[,chrom:=NULL],make.names = "pos")[,lapply(.SD,quantile,quantileLimit,na.rm=TRUE)]
# print(IQRv)
#IQRv<-apply(inputMatrix  %>% filter(chrom==targetChrom) %>% select(scCNVCaller$cellSuffix),1,quantile,0.3,na.rm=TRUE)
IQRs<-scale(t(IQRv),center=TRUE,scale=TRUE)
if (is.nan(as.vector(IQRs)[1])) {
next
}
#expectedSignal<-inputMatrix %>% filter(chrom==targetChrom) %>% select(-cpg,-pos,-chrom) %>% summarise_if(is.numeric,median) %>% gather(barcode,value) %>% summarise_if(is.numeric,mean)
#[,chrom:=NULL]
expectedSignalN<-transpose(inputMatrixK[,lapply(.SD,median),by="pos"],make.names="pos")[,lapply(.SD,mean)]
#print(as.vector(IQRs))
cm<-cpt.meanvar(data=as.vector(IQRs),test.stat="Normal", penalty="AIC",method = "PELT",minseglen = minSeg)
cptlist<-t(rbind(cm@param.est$mean,cm@cpts))
colnames(cptlist)<-c("Mean","Point")
cptlist<-as_tibble(cptlist) %>% mutate(Diff = Point - lag(Point))
plot(cm@data.set,xlab="Chromosome bin",ylim=c(-5,5),ylab="Z-score")
p1<-as_tibble(cptlist) %>% mutate(Start=lag(Point))
p1$Start[1]<-0
p1<-p1 %>% select(Start,Mean,Point,Mean)
for (a in 1:nrow(p1))
{
#print(segments(p1$Start[a],p1$Mean[a],p1$Point[a],p1$Mean[a],col="red"))
segments(p1$Start[a],p1$Mean[a],p1$Point[a],p1$Mean[a],col="red")
}
#print(cptlist)
if (is.na(cptlist$Diff[1]))
{
#  message(cptlist$Diff[1])
cptlist$Diff[1]=cptlist$Point[1]-1
#  message(cptlist$Diff[1])
}
# print(cptlist)
#set up list of double minutes; cutoff 0.002
#1.05e-4
coord_list<-vector(mode = "list")
d_loss<-cptlist %>% filter(Mean<(lossCutoff))
d_lossb<-d_loss
# print(d_loss)
if (nrow(d_loss)>0)
{
#%>% filter(chrom==targetChrom) %>% select(chrom,pos)
d_lossb<-d_loss %>% mutate(startCoord=as.numeric(tmp_coords$pos[Point-Diff]),endCoord=as.numeric(tmp_coords$pos[Point]),startChrom=tmp_coords$chrom[Point])
# print(d_lossb)
#d_lossb<-d_lossb %>% filter((endCoord-startCoord)>=minLength)
tmpb_merged<-d_lossb %>% mutate(touching=(startCoord==lag(endCoord)))
tmpb_merged$touching[1]<-FALSE #otherwise NA
tmpb_merged <- tmpb_merged %>% mutate(startCoord=if_else(touching==TRUE,lag(startCoord),startCoord),Diff=if_else(touching==TRUE,Diff+lag(Diff),Diff))
#print(length(which(tmpb_merged$touching==TRUE)))
#  print(tmpb_merged)
# print(which(tmpb_merged$touching==TRUE)-1)
if (length(which(tmpb_merged$touching==TRUE)) > 0)
{
tmp_merged_final<-tmpb_merged %>% filter(!(row_number() %in% (which(tmpb_merged$touching==TRUE)-1))) %>% select(-touching)
d_lossb<-tmp_merged_final
}
d_lossb <- d_lossb %>% arrange(startChrom,as.numeric(startCoord))
#print(d_lossb)
}
#
#coord_list<-append(coord_list,list(c(last_coords[1],last_coords[2])))
#change this to loop
if (nrow(d_lossb)>=1)
{
for (i in 1:nrow(d_lossb))
{
set.seed(12354)
last_coords[1]<-d_lossb$startCoord[i]
last_coords[2]<-d_lossb$endCoord[i]
alterationName<-str_c(targetChrom,sprintf(fmt="%d",last_coords[1]),sprintf(fmt="%d",last_coords[2]),sep="_")
# message(seg_length)
posList=seq(from=last_coords[1],to=last_coords[2],by = 1e6)
posList<-sprintf(fmt="%d",posList)
#posList
#or max
#print(head(expectedSignal,n=1))
t2d<-inputMatrixK[which(inputMatrixK[,pos %in% posList])][,lapply(.SD,max),.SDcols=-c("pos")] # %>% select(-cpg,-pos,-chrom) %>% summarise_if(is.numeric,max) # %>% select(-cpg)
#t2d<-t2 %>% gather(Cell,Value)
# print(-1*log2(t2d+signalBoost))
#print(str(-1*log2(t2d+signalBoost)))
#generate random vals for zeros
#        print(expectedSignalN)
deadVal=unlist(quantile(expectedSignalN,0.3))
#print(deadVal)
#print(str(deadVal))
# print(head(t2d,n=10))
if (length(t2d)==length(which(t2d==0)))
{
next
}
#  print(which(t2d==0))
#  print(length(which(t2d==0)))
#print(deadVal)
t2d<-t(t2d)
# print(head(t2d))
valsToFill<-rnorm(n=length(which(t2d==0)),mean=deadVal/meanThreshold,sd = 10*signalBoost)
# print(valsToFill)
t2d[which(t2d==0)]<-valsToFill
#  print(head(t2d,n=10))
t2d_trans<-as.vector(t(-1*log2(t2d+deadVal)))
#  print(as.vector(t(-1*log2(t2d+signalBoost))))
#print(str(as.vector(-1*log2(t2d+signalBoost))))
hist(t2d_trans,main=alterationName,breaks = 30)
# print(inputMatrix %>% filter(chrom==targetChrom,pos %in% posList) %>% select(-cpg))
# print(targetChrom)
# print(posList)
fit1<-Mclust(t2d_trans,G=2:3,modelNames=c("V"),initialization = list(noise=TRUE))
if (length(fit1)==0)
{
#message("broken, retry")
fit1<-Mclust(t2d_trans,G=1:2,modelNames=c("V"),initialization = list(noise=TRUE))
if (length(fit1)==0)
{
#message("broken 2")
next()
}
}
#message(fit1$G)
#plot(fit1)
#if (!is.na(fit1))
#{
#print(plot(fit1))
if (fit1$G>2)
{
#collapse clusters
#which diff is bigger
print(summary(fit1))
plot(fit1,what="classification")
diff_2=abs(fit1$parameters$mean[3]-fit1$parameters$mean[2])
diff_1=abs(fit1$parameters$mean[2]-fit1$parameters$mean[1])
clust1_mean<-mean(fit1$parameters$mean[1:2])
clust2_mean<-fit1$parameters$mean[3]
if (diff_2>diff_1)
{
fit1$classification[fit1$classification==2]<-1
fit1$classification[fit1$classification==3]<-2
}
else
{
#fit1$classification[fit1$classification==2]<-1
fit1$classification[fit1$classification==3]<-2
clust1_mean<-fit1$parameters$mean[1]
clust2_mean<-mean(fit1$parameters$mean[2:3])
}
#      print(clust2_mean)
#deadVal=unlist(quantile(expectedSignalN,0.3))
dVal2<-unlist(quantile(expectedSignalN,0.6))
plot(fit1,what="classification")
#  print(dVal2)
signalDiff=2^(-1*clust2_mean)-dVal2
print(signalDiff)
print(fit1$parameters$mean)
print(alterationName)
delta_mean = clust2_mean-clust1_mean
print(delta_mean)
#print(clust2_mean-clust1_mean)
#      delta_mean
#      message(delta_mean)
if (abs(delta_mean)>diffThreshold && (signalDiff<70))
{
alteration_list<-cbind(alteration_list,alterationName)
alteration_delta<-cbind(alteration_delta,signalDiff)
fit1$classification[fit1$uncertainty>uncertaintyCutLoss]<-0
#message(fit1$parameters$mean)
dm_per_cell_vals<-cbind.data.frame(dm_per_cell_vals,fit1$classification)
}
#      #message(fit1$parameters)
}
if (fit1$G==2)
{
#plot(fit1,what="classification")
#check for and collapse cluster assignments
#cells in 2 with val < 1 and vice versa
fit1$classification[fit1$data<fit1$parameters$mean[1] & fit1$classification==2]<-1
fit1$classification[fit1$data>fit1$parameters$mean[2] & fit1$classification==1]<-2
delta_mean = fit1$parameters$mean[2]-fit1$parameters$mean[1]
#message(str_c(delta_mean,"MEAN"))
#       print(delta_mean)
dVal2<-unlist(quantile(expectedSignalN,0.6))
signalDiff=2^(-1*fit1$parameters$mean[2])-dVal2
#print(signalDiff)
#print(delta_mean)
if (abs(delta_mean)>diffThreshold && (signalDiff<70))
{
alteration_list<-cbind(alteration_list,alterationName)
alteration_delta<-cbind(alteration_delta,signalDiff)
#add delta mean
#message(fit1$parameters$mean)
#uncertainty less than 0.2
fit1$classification[fit1$uncertainty>uncertaintyCutLoss]<-0
dm_per_cell_vals<-cbind.data.frame(dm_per_cell_vals,fit1$classification)
}
# }
#  }
}
}
}
#cleanup
}
#final cleanup
#save images
dev.off()
if (length(alteration_list)>0)
{
colnames(dm_per_cell_vals)[2:ncol(dm_per_cell_vals)]<-alteration_list
#cutoff for minimum # of cells
#count # of cells in each cluster
#rowSums(.[2:ncol(cellQuality)]>0)
loss_cluster_counts<-dm_per_cell_vals %>% gather(Alteration,Clust,2:ncol(dm_per_cell_vals)) %>% group_by(Alteration) %>% count(Alteration,Clust)
#  print(loss_cluster_counts)
min_loss<-loss_cluster_counts %>% spread(Clust,n) %>% select(-'0') %>% mutate(min=min(`1`,`2`))
#  print(min_loss)
min_loss[is.na(min_loss)]<-0
#min_loss$Alteration[min_loss$min>lossCutoffCells]
#cut appropriately
dm_per_cell_vals <- dm_per_cell_vals %>% select(cellName,min_loss$Alteration[min_loss$min>lossCutoffCells]) %>% mutate_at(vars(starts_with('chr')),funs(if_else(.==2,-1,.)))
return(list(dm_per_cell_vals,alteration_list,alteration_delta))
}
return(list())
}
getLOHRegions <- function(inputMatrixIn,lossCutoff=(-0.25), uncertaintyCutLoss=0.5, diffThreshold=0.9, minLength=3e6, minSeg=3, lossCutoffCells=100,targetFun=IQR,signalBoost=1e-6,lossCutoffReads=100,quantileLimit=0.3,cpgCutoff=0,meanThreshold=4)
{
#c("E","V")
pdf(str_c(scCNVCaller$locPrefix,scCNVCaller$outPrefix,"_LOH.pdf"),width=6,height=4)
inputMatrix<-data.table(inputMatrixIn)
inputMatrix<-inputMatrix[,cpg:=scCNVCaller$cpg_data$cpg_density]
inputMatrix<-inputMatrix[,arm:=scCNVCaller$cytoband_data$V4]
inputMatrix<-inputMatrix[which(inputMatrix[,arm!="cen" & blacklist==0 & cpg>cpgCutoff & chrom!="chrY"])]
inputMatrix<-inputMatrix[,c("raw_medians","blacklist","cpg","arm"):=NULL]
#inputMatrix<-input
#%>% mutate(cpg=cpg_data$cpg_density) %>% mutate(arm=cytoband_data$V4) %>% filter(arm!="cen", blacklist==0, cpg>0) %>% select(-arm,-blacklist) #%>%  #cpg+
#check if raw_medians
#mutate
#view(inputMatrix$cpg)
#inputMatrix<-inputMatrix %>% mutate_at(vars(ends_with("-1")),funs(./(log(cpg,base=2))))
#print(nrow(inputMatrix))
chromList<-unique(inputMatrix$chrom)
# chromList<-c("chr9","chr10")
#print(chromList)
dm_per_cell_vals<-data.frame(cellName=colnames(inputMatrix  %>% select(ends_with(scCNVCaller$cellSuffix))),stringsAsFactors=FALSE)
alteration_list=c()
last_coords=c(0,0)
alteration_delta=c()
#may not need IQR, may work with mean/median instead
for (targetChrom in chromList)
{
inputMatrixK<-inputMatrix[which(inputMatrix[,chrom==targetChrom])]
tmp_coords<-inputMatrixK[,c("chrom","pos")]
# print(tail(colnames(inputMatrixK)))
#print(transpose(inputMatrixK[,chrom:=NULL],make.names = "pos"))
#print(str(transpose(inputMatrixK[,chrom:=NULL],make.names = "pos")))
#print(tail(colnames((transpose(inputMatrixK[,chrom:=NULL],make.names = "pos")))))
#message(targetChrom)
IQRv<-transpose(inputMatrixK[,chrom:=NULL],make.names = "pos")[,lapply(.SD,quantile,quantileLimit,na.rm=TRUE)]
# print(IQRv)
#IQRv<-apply(inputMatrix  %>% filter(chrom==targetChrom) %>% select(scCNVCaller$cellSuffix),1,quantile,0.3,na.rm=TRUE)
IQRs<-scale(t(IQRv),center=TRUE,scale=TRUE)
if (is.nan(as.vector(IQRs)[1])) {
next
}
#expectedSignal<-inputMatrix %>% filter(chrom==targetChrom) %>% select(-cpg,-pos,-chrom) %>% summarise_if(is.numeric,median) %>% gather(barcode,value) %>% summarise_if(is.numeric,mean)
#[,chrom:=NULL]
expectedSignalN<-transpose(inputMatrixK[,lapply(.SD,median),by="pos"],make.names="pos")[,lapply(.SD,mean)]
#print(as.vector(IQRs))
cm<-cpt.meanvar(data=as.vector(IQRs),test.stat="Normal", penalty="AIC",method = "PELT",minseglen = minSeg)
cptlist<-t(rbind(cm@param.est$mean,cm@cpts))
colnames(cptlist)<-c("Mean","Point")
cptlist<-as_tibble(cptlist) %>% mutate(Diff = Point - lag(Point))
plot(cm@data.set,xlab="Chromosome bin",ylim=c(-5,5),ylab="Z-score")
p1<-as_tibble(cptlist) %>% mutate(Start=lag(Point))
p1$Start[1]<-0
p1<-p1 %>% select(Start,Mean,Point,Mean)
for (a in 1:nrow(p1))
{
#print(segments(p1$Start[a],p1$Mean[a],p1$Point[a],p1$Mean[a],col="red"))
segments(p1$Start[a],p1$Mean[a],p1$Point[a],p1$Mean[a],col="red")
}
#print(cptlist)
if (is.na(cptlist$Diff[1]))
{
#  message(cptlist$Diff[1])
cptlist$Diff[1]=cptlist$Point[1]-1
#  message(cptlist$Diff[1])
}
# print(cptlist)
#set up list of double minutes; cutoff 0.002
#1.05e-4
coord_list<-vector(mode = "list")
d_loss<-cptlist %>% filter(Mean<(lossCutoff))
d_lossb<-d_loss
# print(d_loss)
if (nrow(d_loss)>0)
{
#%>% filter(chrom==targetChrom) %>% select(chrom,pos)
d_lossb<-d_loss %>% mutate(startCoord=as.numeric(tmp_coords$pos[Point-Diff]),endCoord=as.numeric(tmp_coords$pos[Point]),startChrom=tmp_coords$chrom[Point])
# print(d_lossb)
#d_lossb<-d_lossb %>% filter((endCoord-startCoord)>=minLength)
tmpb_merged<-d_lossb %>% mutate(touching=(startCoord==lag(endCoord)))
tmpb_merged$touching[1]<-FALSE #otherwise NA
tmpb_merged <- tmpb_merged %>% mutate(startCoord=if_else(touching==TRUE,lag(startCoord),startCoord),Diff=if_else(touching==TRUE,Diff+lag(Diff),Diff))
#print(length(which(tmpb_merged$touching==TRUE)))
#  print(tmpb_merged)
# print(which(tmpb_merged$touching==TRUE)-1)
if (length(which(tmpb_merged$touching==TRUE)) > 0)
{
tmp_merged_final<-tmpb_merged %>% filter(!(row_number() %in% (which(tmpb_merged$touching==TRUE)-1))) %>% select(-touching)
d_lossb<-tmp_merged_final
}
d_lossb <- d_lossb %>% arrange(startChrom,as.numeric(startCoord))
#print(d_lossb)
}
#
#coord_list<-append(coord_list,list(c(last_coords[1],last_coords[2])))
#change this to loop
if (nrow(d_lossb)>=1)
{
for (i in 1:nrow(d_lossb))
{
set.seed(12354)
last_coords[1]<-d_lossb$startCoord[i]
last_coords[2]<-d_lossb$endCoord[i]
alterationName<-str_c(targetChrom,sprintf(fmt="%d",last_coords[1]),sprintf(fmt="%d",last_coords[2]),sep="_")
# message(seg_length)
posList=seq(from=last_coords[1],to=last_coords[2],by = 1e6)
posList<-sprintf(fmt="%d",posList)
#posList
#or max
#print(head(expectedSignal,n=1))
t2d<-inputMatrixK[which(inputMatrixK[,pos %in% posList])][,lapply(.SD,max),.SDcols=-c("pos")] # %>% select(-cpg,-pos,-chrom) %>% summarise_if(is.numeric,max) # %>% select(-cpg)
#t2d<-t2 %>% gather(Cell,Value)
# print(-1*log2(t2d+signalBoost))
#print(str(-1*log2(t2d+signalBoost)))
#generate random vals for zeros
#        print(expectedSignalN)
deadVal=unlist(quantile(expectedSignalN,0.3))
#print(deadVal)
#print(str(deadVal))
# print(head(t2d,n=10))
if (length(t2d)==length(which(t2d==0)))
{
next
}
#  print(which(t2d==0))
#  print(length(which(t2d==0)))
#print(deadVal)
t2d<-t(t2d)
# print(head(t2d))
valsToFill<-rnorm(n=length(which(t2d==0)),mean=deadVal/meanThreshold,sd = 10*signalBoost)
# print(valsToFill)
t2d[which(t2d==0)]<-valsToFill
#  print(head(t2d,n=10))
t2d_trans<-as.vector(t(-1*log2(t2d+deadVal)))
#  print(as.vector(t(-1*log2(t2d+signalBoost))))
#print(str(as.vector(-1*log2(t2d+signalBoost))))
hist(t2d_trans,main=alterationName,breaks = 30)
# print(inputMatrix %>% filter(chrom==targetChrom,pos %in% posList) %>% select(-cpg))
# print(targetChrom)
# print(posList)
fit1<-Mclust(t2d_trans,G=2:3,modelNames=c("V"),initialization = list(noise=TRUE))
if (length(fit1)==0)
{
#message("broken, retry")
fit1<-Mclust(t2d_trans,G=1:2,modelNames=c("V"),initialization = list(noise=TRUE))
if (length(fit1)==0)
{
#message("broken 2")
next()
}
}
#message(fit1$G)
#plot(fit1)
#if (!is.na(fit1))
#{
#print(plot(fit1))
if (fit1$G>2)
{
#collapse clusters
#which diff is bigger
print(summary(fit1))
plot(fit1,what="classification")
diff_2=abs(fit1$parameters$mean[3]-fit1$parameters$mean[2])
diff_1=abs(fit1$parameters$mean[2]-fit1$parameters$mean[1])
clust1_mean<-mean(fit1$parameters$mean[1:2])
clust2_mean<-fit1$parameters$mean[3]
if (diff_2>diff_1)
{
fit1$classification[fit1$classification==2]<-1
fit1$classification[fit1$classification==3]<-2
}
else
{
#fit1$classification[fit1$classification==2]<-1
fit1$classification[fit1$classification==3]<-2
clust1_mean<-fit1$parameters$mean[1]
clust2_mean<-mean(fit1$parameters$mean[2:3])
}
#      print(clust2_mean)
#deadVal=unlist(quantile(expectedSignalN,0.3))
dVal2<-unlist(quantile(expectedSignalN,0.6))
plot(fit1,what="classification")
#  print(dVal2)
signalDiff=2^(-1*clust2_mean)-dVal2
print(signalDiff)
print(fit1$parameters$mean)
print(alterationName)
delta_mean = clust2_mean-clust1_mean
print(delta_mean)
#print(clust2_mean-clust1_mean)
#      delta_mean
#      message(delta_mean)
if (abs(delta_mean)>diffThreshold && (signalDiff<70))
{
alteration_list<-cbind(alteration_list,alterationName)
alteration_delta<-cbind(alteration_delta,signalDiff)
fit1$classification[fit1$uncertainty>uncertaintyCutLoss]<-0
#message(fit1$parameters$mean)
dm_per_cell_vals<-cbind.data.frame(dm_per_cell_vals,fit1$classification)
}
#      #message(fit1$parameters)
}
if (fit1$G==2)
{
#plot(fit1,what="classification")
#check for and collapse cluster assignments
#cells in 2 with val < 1 and vice versa
fit1$classification[fit1$data<fit1$parameters$mean[1] & fit1$classification==2]<-1
fit1$classification[fit1$data>fit1$parameters$mean[2] & fit1$classification==1]<-2
delta_mean = fit1$parameters$mean[2]-fit1$parameters$mean[1]
#message(str_c(delta_mean,"MEAN"))
#       print(delta_mean)
dVal2<-unlist(quantile(expectedSignalN,0.6))
signalDiff=2^(-1*fit1$parameters$mean[2])-dVal2
#print(signalDiff)
#print(delta_mean)
if (abs(delta_mean)>diffThreshold && (signalDiff<70))
{
alteration_list<-cbind(alteration_list,alterationName)
alteration_delta<-cbind(alteration_delta,signalDiff)
#add delta mean
#message(fit1$parameters$mean)
#uncertainty less than 0.2
fit1$classification[fit1$uncertainty>uncertaintyCutLoss]<-0
dm_per_cell_vals<-cbind.data.frame(dm_per_cell_vals,fit1$classification)
}
# }
#  }
}
}
}
#cleanup
}
#final cleanup
#save images
dev.off()
if (length(alteration_list)>0)
{
colnames(dm_per_cell_vals)[2:ncol(dm_per_cell_vals)]<-alteration_list
#cutoff for minimum # of cells
#count # of cells in each cluster
#rowSums(.[2:ncol(cellQuality)]>0)
loss_cluster_counts<-dm_per_cell_vals %>% gather(Alteration,Clust,2:ncol(dm_per_cell_vals)) %>% group_by(Alteration) %>% count(Alteration,Clust)
#  print(loss_cluster_counts)
min_loss<-loss_cluster_counts %>% spread(Clust,n) %>% select(-'0') %>% mutate(min=min(`1`,`2`))
#  print(min_loss)
min_loss[is.na(min_loss)]<-0
#min_loss$Alteration[min_loss$min>lossCutoffCells]
#cut appropriately
dm_per_cell_vals <- dm_per_cell_vals %>% select(cellName,min_loss$Alteration[min_loss$min>lossCutoffCells]) %>% mutate_at(vars(starts_with('chr')),funs(if_else(.==2,-1,.)))
return(list(dm_per_cell_vals,alteration_list,alteration_delta))
}
return(list())
}
res_loss<-getLOHRegions(scData_k_norm_cp2,diffThreshold = 0.90,lossCutoff = -0.75,minLength = 2e6,minSeg=2,targetFun=IQR,signalBoost=2,lossCutoffCells = 150,lossCutoffReads = 75,quantileLimit=0.3,meanThreshold=5)
res_loss[[1]]
locPrefix="~/"
outPrefix="4250"
write.table(x=res_loss[[1]],file=str_c(locPrefix,outPrefix,"_merge","_loss_new.csv"),quote=FALSE,row.names = FALSE,sep=",")
